body{
    max-width: 1000px;
    margin: 0 auto;
    /* 
    body{
        font-size:0.875;
        color:#333;
        フォントサイズと色のみ記述
        横幅の設定はcontainerを設定してそこに記述する。
    }
     */

    
}
/* 横幅の指定はbodyに直接するのではなくcontainerタグを使用
    container{
    max-width: 1000px;
    margin: 0 auto;
    }
*/
img{
    max-width: 100%;
}
/* ulを使用していたため追加
    ul{
        list-style:none;

    }
*/
header{
    margin-top: 30px;
}
/* 
#header{
    max-width:1080px;
}
*/
/* 
.inner{
    main以下の800px部分をまとめる役割で.innerタグが設置されていた
    このタグでindex~detailを囲む事と中の要素の幅を指定できる
}
*/


#index{
    margin: 0 auto;
    max-width: 800px;
    text-align: center;
    background-color: rgb(209, 205, 205);
    margin-top: 50px;
    margin-bottom: 50px;
    /* 

     */


}
.index-main{
    display: inline-block;
    /* ブロック要素自体を真ん中でそろえる（リスト付きの場合）
        1.親要素にtext-align: center;を付ける
        2.子要素にdisplay: inline-block;を付ける
         →子要素は text-align: center;が反映されて要素ごと真ん中に移動する
         なぜなのか？
         ブロック要素→テキスト部分のみ真ん中に移動
         インライン要素→ブロックごと真ん中に移動が可能
         .index-main内部で display: inline-block;にする事でインライン要素を持つことができる
         インライン要素→CSSを当てられない、ブロック内は文書の一部として扱う
         ブロック要素→行全体をまとまりとして扱う*/

         padding:40px 60px 30px 60px;

}
.index-ol{
    display: table;
    margin: 0 auto ;
    padding:20px 200px ;
    border: solid 1px black;
}
.title{
    font-size: 20px;
    font-weight: bold;
}
#index li{
    margin-bottom: 10px;
}
#index li:last-child{
    margin-bottom: 0px;
}
#imgs{
    margin: 0 auto;
    max-width: 800px;

}
.imgList{
    grid-template-columns:  repeat(2, auto);
    display: grid;
/* 画像を2列にする
display:grid;とは？
display:gridを指定する事でコンテナになる
コンテナ以下の子要素（img）がアイテムとして管理される
repeat(2, auto);→同じ値を繰り返す場合に左:繰り返す回数 右:繰り返す値を記述する。
 */
}
.imgList img{
    max-width: 400px;
    padding: 10px;
}
#h2{
    padding-top: 30px;
}
#detail{
    margin: 0 auto;
    max-width: 800px;
    text-align: center;
    background-color: rgb(209, 205, 205);
    margin-top: 50px ;
}
.detail-main{
    display: flex;
    padding: 30px 50px 50px 50px;

}
dl{
    display: flex;
    flex-wrap: wrap;
}
dt{
    text-align: left;
    margin: 0;
    width: 30%;
}
dd{
    text-align: left;
    margin: 0;

    width: 75%;
}
.detail-text{
    padding-left:50px ;
    width: 150%;
    border-left: 1px solid #000;
    text-align: left;
    position: relative;

}
p{

    margin-bottom: 10px;
}
a{
    position: absolute;
    bottom: 0;
    margin: 0;
    color: black;
    /* 文字を要素最下部に寄せたい場合
       基準したい親要素の指定→position: relative;
       子要素の指定→position: absolute;
       bottom: 0;で要素最下部に寄せることができる */
}
@media screen and(max-width:1024px){
    .inner{
        padding: 30px;
    }
    
}





